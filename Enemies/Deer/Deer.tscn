[gd_scene load_steps=6 format=2]

[ext_resource path="res://Enemies/Deer/assets/deer_sprite.png" type="Texture" id=1]
[ext_resource path="res://Enemies/Wolf/scenes/Hurtbox.tscn" type="PackedScene" id=5]

[sub_resource type="GDScript" id=4]
script/source = "extends KinematicBody2D

const MAX_HP = 3
var hp = 3

enum {
  IDLE,
  FLOCK,
  FLEE
}

var velocity = Vector2.ZERO
var location = Vector2.ZERO
var acceleration = Vector2.ZERO
var state = IDLE

const MAX_SPEED = 2500
const MAX_ACCELERATION = 1000
const TOLERANCE = 4

var circle_distance = 4000
var circle_radius = 2000
var wanderAngle = 20
var angle_change = 10

func is_at_target_position(): 
  return (velocity  - global_position).length() < TOLERANCE

func _physics_process(delta):
	if	state == FLEE:
		state = FLOCK
	var fleeArray : Array
	fleeArray.append_array(get_parent().getWolvesArray())
	#if get_parent().getPlayer() != null:
	#	fleeArray.append(get_parent().getPlayer())
	for other in fleeArray:
		if is_instance_valid(other):
			var d = global_position.distance_to(other.global_position);
			if ((d > 0) && (d < 100)):
				state = FLEE
				break;
	match state:
		IDLE:
			if $Timer.is_stopped():
				state = FLOCK
				$Timer.start()
				var deley = rand_range(0, 1)*2
				$Timer.wait_time = deley
			velocity *= 0
		FLOCK:
			cohesion(delta)
			separate(delta)
			align(delta)
			wander(delta)
			if $Timer.is_stopped():
				state = IDLE
				$Timer.start()
				$Timer.wait_time = 1
		FLEE:
			flee(delta)
			
	velocity += acceleration
	velocity = velocity.clamped(MAX_SPEED)  
	location += velocity
	location = move_and_slide(location * delta)
	acceleration *= 0
	
func wander(delta):
  var circleCenter = Vector2()
  circleCenter = Vector2(velocity.x, velocity.y)
  circleCenter = circleCenter.normalized()
  circleCenter *= circle_distance
  var displacement = Vector2(0, -1)
  displacement *= circle_radius
  displacement = setAngle(displacement, wanderAngle)
  wanderAngle += randi() * angle_change - angle_change * 0.5;
  acceleration += (circleCenter + displacement) * delta 
  
func setAngle(vector, value):
  var length = vector.length();
  vector.x = cos(value) * length;
  vector.y = sin(value) * length;
  return vector

func flee(delta): 
	var sum : Vector2
	var count = 0
	for other in get_parent().getAllArray():
		if is_instance_valid(other):
			var d = global_position.distance_to(other.global_position);
			if ((d > 0) && (d < 100)):
			  var diff = global_position - other.global_position
			  diff = diff.normalized()
			  diff /= (d)
			  sum += diff
			  count += 1
	if (count > 0):
		sum /= count 
		sum = sum.normalized()
		sum *= MAX_SPEED 
		var steer = sum - velocity
		steer = steer.clamped(MAX_SPEED)
		acceleration += steer * delta 
	else: 
		state = FLOCK
		
func separate(delta): 
	var sum : Vector2
	var count = 0
	for other in get_parent().getDeersArray():
		if is_instance_valid(other):
			var d = global_position.distance_to(other.global_position);
			if ((d > 0) && (d < 30)):
			  var diff = global_position - other.global_position
			  diff = diff.normalized()
			  diff /= (d)
			  sum += diff
			  count += 1
	if (count > 0):
		sum /= count 
		sum = sum.normalized()
		sum *= MAX_SPEED 
		var steer = sum - velocity
		steer = steer.clamped(MAX_SPEED)
		acceleration += steer * delta * 10
		
func align(delta):
	var sum = Vector2.ZERO
	var count = 0
	for other in get_parent().getDeersArray():
		if is_instance_valid(other):
			var d = global_position.distance_to(other.global_position);
			if ((d > 0) && (d < 100)):
				sum += other.velocity
				count += 1
	if (count > 0):
		sum /= count
		sum  = sum.normalized();
		sum *= MAX_SPEED
		var steer = sum - velocity
		steer = steer.clamped(MAX_ACCELERATION)
		acceleration += steer * delta
		
func cohesion(delta): 
	var sum = Vector2.ZERO
	var count = 0
	for other in get_parent().getDeersArray():
		if is_instance_valid(other):
			var d = global_position.distance_to(other.global_position);
			if ((d > 0) && (d < 100)):
				sum += other.location
				count += 1
	if (count > 0):
		sum /= count
		seek(sum, delta)
	
func seek(target, delta):
	var desired = target - global_position
	desired = desired.normalized()
	desired *= (MAX_SPEED)
	var steer = desired - velocity
	steer = steer.clamped(MAX_ACCELERATION)
	acceleration += steer * delta  
	
func handle_hit(taken_damage: int) -> void:
	hp -= taken_damage
	if hp <= 0:
		queue_free()
		
func die():
	queue_free()
	
"

[sub_resource type="CircleShape2D" id=1]
radius = 6.408

[sub_resource type="CircleShape2D" id=3]
radius = 6.00559

[node name="Deer" type="KinematicBody2D"]
collision_layer = 2
script = SubResource( 4 )

[node name="Sprite" type="Sprite" parent="."]
position = Vector2( 0, -5 )
texture = ExtResource( 1 )

[node name="Collision" type="CollisionShape2D" parent="."]
position = Vector2( 0, 0.875 )
shape = SubResource( 1 )

[node name="Timer" type="Timer" parent="."]
one_shot = true
autostart = true

[node name="Hurtbox" parent="." instance=ExtResource( 5 )]

[node name="Hurtbox2" type="CollisionShape2D" parent="Hurtbox"]
position = Vector2( 0, 1 )
shape = SubResource( 3 )

[connection signal="timeout" from="Timer" to="." method="_on_Timer_timeout"]
