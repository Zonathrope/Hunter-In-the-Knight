[gd_scene load_steps=6 format=2]

[ext_resource path="res://Animals/Rabbit/assets/rabbit_sprite.png" type="Texture" id=1]
[ext_resource path="res://Animals/Wolf/scenes/Hurtbox.tscn" type="PackedScene" id=2]

[sub_resource type="GDScript" id=4]
script/source = "extends KinematicBody2D

const MAX_HP = 1
var hp = 1

enum {
  IDLE,
  WANDER,
  FLEE
}

var velocity = Vector2.ZERO
var location =  Vector2.ZERO
var acceleration = Vector2.ZERO
var state = IDLE
var is_near_edge: bool
var edge_normal: Vector2

const MAX_SPEED = 3200
const TOLERANCE = 4

var circle_distance = 40
var circle_radius = 20
var wander_angle = 20
var angle_change = 10

func is_at_target_position(): 
  return (velocity  - global_position).length() < TOLERANCE

func _physics_process(delta):
	if	state == FLEE:
		state = WANDER
	for other in get_parent().getAllArray():
		if other == null:
			continue
		if is_instance_valid(other):
			var d = global_position.distance_to(other.global_position);
			if ((d > 0) && (d < 50)):
				state = FLEE
				break;
	match state:
		IDLE:
			if $Timer.is_stopped():
				state = WANDER
				$Timer.start()
				$Timer.wait_time = rand_range(0,2)*2
			velocity *= 0
		WANDER:
			wander(delta)
			if $Timer.is_stopped():
				state = IDLE
				$Timer.start()
				$Timer.wait_time = rand_range(0,1)*4
		FLEE:
			flee(delta)
	if is_near_edge:
		acceleration += 2500 * edge_normal
	velocity += acceleration
	velocity = velocity.clamped(MAX_SPEED)
	location += velocity
	location = move_and_slide(location * delta)
	acceleration *= 0
	

func wander(delta):
	var circleCenter = Vector2()
	circleCenter = Vector2(velocity.x, velocity.y)
	circleCenter = circleCenter.normalized()
	circleCenter *= circle_distance
	var displacement = Vector2(0, -1)
	displacement *= circle_radius
	displacement = calculate_vector(displacement, wander_angle)
	wander_angle += randi() * angle_change - angle_change * 0.5;
	acceleration = (circleCenter + displacement) * MAX_SPEED/4 * delta

  
func calculate_vector(vector, angle):
  var length = vector.length();
  vector.x = cos(angle) * length;
  vector.y = sin(angle) * length;
  return vector

func flee(delta):
	var sum : Vector2
	var count = 0
	for other in get_parent().getAllArray():
		if other == null:
			continue
		if is_instance_valid(other):
			var d = global_position.distance_to(other.global_position);
			if ((d > 0) && (d < 100)):
			  var diff = global_position - other.global_position
			  diff = diff.normalized()
			  diff /= (d)
			  sum += diff
			  count += 1
	if (count > 0):
		sum /= count 
		sum = sum.normalized()
		sum *= MAX_SPEED 
		var steer = sum - velocity
		steer = steer.clamped(MAX_SPEED)
		acceleration += steer 
	else: 
		state = WANDER
	
	
func handle_hit(taken_damage: int) -> void:
	hp -= taken_damage
	if hp <= 0:
		queue_free()
		
func die():
	queue_free()
	
"

[sub_resource type="CircleShape2D" id=1]
radius = 6.408

[sub_resource type="CircleShape2D" id=3]
radius = 6.00559

[node name="Rabbit" type="KinematicBody2D" groups=["animals"]]
collision_layer = 2
script = SubResource( 4 )

[node name="Sprite" type="Sprite" parent="."]
texture = ExtResource( 1 )

[node name="Collision" type="CollisionShape2D" parent="."]
position = Vector2( 0, 0.875 )
shape = SubResource( 1 )

[node name="Timer" type="Timer" parent="."]
one_shot = true
autostart = true

[node name="Hurtbox" parent="." instance=ExtResource( 2 )]

[node name="Hurtbox2" type="CollisionShape2D" parent="Hurtbox"]
shape = SubResource( 3 )

[connection signal="timeout" from="Timer" to="." method="_on_Timer_timeout"]
